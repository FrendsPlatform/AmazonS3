using System;
using System.ComponentModel;
using System.Threading;
using Frends.AmazonS3.ListObjects.Definitions;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using System.Collections.Generic;
using Amazon.S3.Model;

namespace Frends.AmazonS3.ListObjects
{
    /// <summary>
    /// Amazon S3 task.
    /// </summary>
    public class AmazonS3
    {
        /// <summary>
        /// List objects in AWS S3.
        /// </summary>
        /// <param name="source">Source connection parameters</param>
        /// <param name="options">Options for the task</param>
        /// <param name="cancellationToken">Token to stop ListObjects. This is generated by Frends.</param>
        /// <returns>object { string BucketName, string Key, string Etag, long Size, DateTime LastModified  }</returns>
        public static async Task<Result> ListObjects([PropertyTab] Source source, [PropertyTab] Options options, CancellationToken cancellationToken)
        {
            var response = await ListBucketContentsAsync(source, options, cancellationToken);

            return new Result { ObjectList = response };
        }

#pragma warning disable CS1591 // Helping methods. No need for XML.
        public static async Task<List<BucketObject>> ListBucketContentsAsync(Source source, Options options, CancellationToken cancellationToken)
        {
            try
            {
                if (source.AwsSecretAccessKey is null || source.AwsAccessKeyId is null)
                    throw new Exception("AWS credentials missing.");

                var region = RegionSelection(source.Region);
                var client = new AmazonS3Client(source.AwsAccessKeyId, source.AwsSecretAccessKey, region);
                var data = new List<BucketObject>();
                var request = new ListObjectsV2Request
                {
                    BucketName = source.BucketName,
                    Delimiter = string.IsNullOrWhiteSpace(options.Delimiter) ? null : options.Delimiter,
                    Encoding = null,
                    FetchOwner = false,
                    MaxKeys = options.MaxKeys,
                    Prefix = string.IsNullOrWhiteSpace(options.Prefix) ? null : options.Prefix,
                    ContinuationToken = string.IsNullOrWhiteSpace(options.ContinuationToken) ? null : options.ContinuationToken,
                    StartAfter = string.IsNullOrWhiteSpace(options.StartAfter) ? null : options.StartAfter
                };

                var response = new ListObjectsV2Response();

                do
                {
                    response = await client.ListObjectsV2Async(request, cancellationToken);

                    foreach (var item in response.S3Objects)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        data.Add(new BucketObject
                        {
                            BucketName = item.BucketName,
                            Key = item.Key,
                            Size = item.Size,
                            Etag = item.ETag,
                            LastModified = item.LastModified

                        });
                    }
                    request.ContinuationToken = response.NextContinuationToken;
                }
                while (response.IsTruncated);

                return data;
            }
            catch (AmazonS3Exception ex)
            {
                throw new Exception($"Error encountered on server. Message:'{ex.Message}' getting list of objects.");
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        public static RegionEndpoint RegionSelection(Regions region)
        {
            switch (region)
            {
                case Regions.AfSouth1:
                    return RegionEndpoint.AFSouth1;
                case Regions.ApEast1:
                    return RegionEndpoint.APEast1;
                case Regions.ApNortheast1:
                    return RegionEndpoint.APNortheast1;
                case Regions.ApNortheast2:
                    return RegionEndpoint.APNortheast2;
                case Regions.ApNortheast3:
                    return RegionEndpoint.APNortheast3;
                case Regions.ApSouth1:
                    return RegionEndpoint.APSouth1;
                case Regions.ApSoutheast1:
                    return RegionEndpoint.APSoutheast1;
                case Regions.ApSoutheast2:
                    return RegionEndpoint.APSoutheast2;
                case Regions.CaCentral1:
                    return RegionEndpoint.CACentral1;
                case Regions.CnNorth1:
                    return RegionEndpoint.CNNorth1;
                case Regions.CnNorthWest1:
                    return RegionEndpoint.CNNorthWest1;
                case Regions.EuCentral1:
                    return RegionEndpoint.EUCentral1;
                case Regions.EuNorth1:
                    return RegionEndpoint.EUNorth1;
                case Regions.EuSouth1:
                    return RegionEndpoint.EUSouth1;
                case Regions.EuWest1:
                    return RegionEndpoint.EUWest1;
                case Regions.EuWest2:
                    return RegionEndpoint.EUWest2;
                case Regions.EuWest3:
                    return RegionEndpoint.EUWest3;
                case Regions.MeSouth1:
                    return RegionEndpoint.MESouth1;
                case Regions.SaEast1:
                    return RegionEndpoint.SAEast1;
                case Regions.UsEast1:
                    return RegionEndpoint.USEast1;
                case Regions.UsEast2:
                    return RegionEndpoint.USEast2;
                case Regions.UsWest1:
                    return RegionEndpoint.USWest1;
                case Regions.UsWest2:
                    return RegionEndpoint.USWest2;
                default:
                    return RegionEndpoint.EUWest1;
            }
        }
    }
}
